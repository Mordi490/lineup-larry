// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum Role {
    USER
    ADMIN
}

model Lineup {
    id        String    @id @default(cuid())
    title     String
    creator   String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    agent     String
    map       String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    image     String
    text      String?
    isSetup   Boolean   @default(false)
    votes     Int       @default(0) // TODO: consider removing once votes have been impl
    comments  Comment[]
    vote      Vote[]
    //VotesOnLineup VotesOnLineup[] // explicit many-to-many
}

model Comment {
    id       String   @id @default(uuid())
    user     User     @relation(fields: [userId], references: [id])
    content  String
    date     DateTime @default(now())
    lineup   Lineup   @relation(fields: [lineupId], references: [id])
    lineupId String
    userId   String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String
    accounts      Account[]
    sessions      Session[]
    Role          Role      @default(USER)
    Lineups       Lineup[]
    Comment       Comment[]
    Votes         Vote[]
}

// explicit many-to-many relationships 
//model VotesOnLineup {
//lineup   Lineup @relation(fields: [lineupId], references: [id])
//lineupId String
//Vote     Vote   @relation(fields: [voteId], references: [id])
//voteId   String

//@@id([lineupId, voteId])
//}

model Vote {
    id        String @id @default(uuid())
    sentiment String
    user      User   @relation(fields: [userId], references: [id])
    userId    String
    lineup    Lineup @relation(fields: [lineupId], references: [id])
    lineupId  String
    //VotesOnLineup VotesOnLineup[] // explicit many-to-many
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
