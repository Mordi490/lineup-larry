// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum Role {
    USER
    ADMIN
}

enum Agent {
    BRIMSTONE
    VIPER
    OMEN
    KILLJOY
    CYPHER
    SOVA
    SAGE
    PHOENIX
    JETT
    REYNA
    RAZE
    BREACH
    SKYE
    YORU
    ASTRA
    CHAMBER
    NEON
    FADE
}

enum Map {
    BIND
    HAVEN
    SPLIT
    ASCENT
    ICEBOX
    BREEZE
    FRACTURE
    PEARL
}

model Lineup {
    id        String    @id @default(cuid())
    title     String
    creator   String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    agent     Agent
    map       Map
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    // TODO: Make image NOT optional once proper fileupload is setup
    image     String?
    text      String?
    votes     Int       @default(0)
    comments  Comment[]
}

model Comment {
    id       String   @id @default(uuid())
    user     User     @relation(fields: [userId], references: [id])
    content  String
    date     DateTime @default(now())
    Lineup   Lineup   @relation(fields: [lineupId], references: [id])
    lineupId String
    userId   String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Role          Role      @default(USER)
    Lineups       Lineup[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
